{"version":3,"file":"static/js/589.b6f82ad8.chunk.js","mappings":"kRA+GA,UA/FqB,WACnB,OAAwBA,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,EAAa,kBAAMD,GAASD,EAAf,EACbG,GAAWC,EAAAA,EAAAA,MAmBXC,EAAa,CACjB,CAAEC,KAAM,OAAQC,MAAO,OAAQC,KAAM,QACrC,CAAEF,KAAM,QAASC,MAAO,QAASC,KAAM,UAGzC,OACE,SAAC,KAAD,CAAMC,MAAM,SAASC,QAAQ,SAA7B,UACE,SAAC,KAAD,CAAKC,EAAG,EAAGC,QAAQ,KAAnB,UACE,SAAC,KAAD,CAAQC,cAzBQ,CACpBP,KAAM,GACNQ,MAAO,GACPC,SAAU,IAsBgCC,SAnBnB,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACjDD,GAAc,GACdD,EAAOX,KAAKc,QAAU,GACtBH,EAAOH,MAAMM,QAAU,GACvBH,EAAOF,SAASK,QAAU,EACtBC,IAAK,yCACLlB,GAASmB,EAAAA,EAAAA,IAASL,IACtBE,IACAD,GAAc,EACf,EAUK,SACG,gBAAGD,EAAH,EAAGA,OAAQM,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,WAAzB,OACC,UAAC,KAAD,WACGnB,EAAWoB,KAAI,gBAAGnB,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,KAAhB,OACd,4BACE,SAAC,KAAD,CACEkB,WAAW,MACXC,SAAS,OACTC,GAAG,MACHC,GAAG,OACHC,QAAQ,GALV,SAOGvB,KAEH,SAAC,KAAD,CACEwB,GAAIC,EAAAA,GACJC,QAAQ,SACRzB,KAAMA,EACNF,KAAMA,EACN4B,GAAI5B,EACJ6B,OAAQX,EACRY,SAAUb,EACVc,YAAa9B,EACb+B,MAAOrB,EAAOX,IAAS,OAnBjBA,EADI,IAuBZ,KACJ,SAAC,KAAD,CACEoB,WAAW,MACXC,SAAS,OACTC,GAAG,MACHC,GAAG,OACHC,QAAQ,GALV,uBASA,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,QAAQ,SACR3B,KAAK,WACLE,KAAMR,EAAO,OAAS,WACtBkC,GAAG,WACHC,OAAQX,EACRY,SAAUb,EACVc,YAAY,WACZC,MAAOrB,EAAOF,UAAY,MAE5B,SAAC,KAAD,CAAmBwB,MAAM,SAAzB,UACE,SAAC,KAAD,CAAQC,EAAE,UAAUC,KAAK,KAAKC,QAASxC,EAAvC,SACGF,GAAO,SAAC,KAAD,KAAe,SAAC,KAAD,YAI7B,SAAC,KAAD,CAAQQ,KAAK,SAASmC,YAAY,SAASJ,MAAM,OAAOV,GAAG,OAA3D,sBArDH,OA8DV,C","sources":["pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { register } from '../../redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport swal from 'sweetalert';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n} from '@chakra-ui/react';\nimport { Formik, Form, Field } from 'formik';\n\nconst RegisterPage = () => {\n  const [show, setShow] = useState(false);\n  const handleShow = () => setShow(!show);\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmitForm = (values, { setSubmitting, resetForm }) => {\n    setSubmitting(true);\n    values.name.length <= 0 ||\n    values.email.length <= 0 ||\n    values.password.length <= 0\n      ? swal('Please enter name, email and password')\n      : dispatch(register(values));\n    resetForm();\n    setSubmitting(false);\n  };\n\n  const fieldsData = [\n    { name: 'name', label: 'Name', type: 'text' },\n    { name: 'email', label: 'Email', type: 'email' },\n  ];\n\n  return (\n    <Flex align=\"center\" justify=\"center\">\n      <Box p={6} rounded=\"md\">\n        <Formik initialValues={initialValues} onSubmit={handleSubmitForm}>\n          {({ values, handleChange, handleBlur }) => (\n            <Form>\n              {fieldsData.map(({ name, label, type }) => (\n                <div key={name}>\n                  <FormLabel\n                    fontWeight=\"300\"\n                    fontSize=\"15px\"\n                    mb=\"0px\"\n                    mt=\"15px\"\n                    htmlFor=\"\"\n                  >\n                    {label}\n                  </FormLabel>\n                  <Field\n                    as={Input}\n                    variant=\"filled\"\n                    type={type}\n                    name={name}\n                    id={name}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder={label}\n                    value={values[name] || ''}\n                  />\n                </div>\n              ))}{' '}\n              <FormLabel\n                fontWeight=\"300\"\n                fontSize=\"15px\"\n                mb=\"0px\"\n                mt=\"15px\"\n                htmlFor=\"\"\n              >\n                Password\n              </FormLabel>\n              <InputGroup>\n                <Field\n                  as={Input}\n                  variant=\"filled\"\n                  name=\"password\"\n                  type={show ? 'text' : 'password'}\n                  id=\"Password\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  placeholder=\"Password\"\n                  value={values.password || ''}\n                />\n                <InputRightElement width=\"4.5rem\">\n                  <Button h=\"1.75rem\" size=\"sm\" onClick={handleShow}>\n                    {show ? <ViewIcon /> : <ViewOffIcon />}\n                  </Button>\n                </InputRightElement>\n              </InputGroup>\n              <Button type=\"submit\" colorScheme=\"purple\" width=\"full\" mt=\"30px\">\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["useState","show","setShow","handleShow","dispatch","useDispatch","fieldsData","name","label","type","align","justify","p","rounded","initialValues","email","password","onSubmit","values","setSubmitting","resetForm","length","swal","register","handleChange","handleBlur","map","fontWeight","fontSize","mb","mt","htmlFor","as","Input","variant","id","onBlur","onChange","placeholder","value","width","h","size","onClick","colorScheme"],"sourceRoot":""}