{"version":3,"file":"static/js/680.90b7aabf.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","pages/ContactPages/components/ContactForm.jsx","pages/ContactPages/components/ContactList.jsx","pages/ContactPages/components/Filter.jsx","ColorModeSwitcher.js","pages/ContactPages/ContactPage.jsx","pages/HomePage/HomePage.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["export const selectAllContacts = state => state.contacts.items;\n","import { addContact } from '../../../redux/contacts/contactsApi';\nimport { Formik, Form, Field } from 'formik';\nimport { selectAllContacts } from '../../../redux/contacts/contactsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Button, Flex, FormLabel, Input, Text } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const allContacts = useSelector(selectAllContacts);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmitForm = (values, { setSubmitting, resetForm }) => {\n    setSubmitting(true);\n    allContacts.some(\n      item => item.name.toLowerCase() === values.name.toLowerCase()\n    )\n      ? alert(`${values.name} is already in contacts`)\n      : dispatch(addContact(values));\n    resetForm();\n    setSubmitting(false);\n  };\n\n  const fieldsData = [\n    { name: 'name', label: 'Name' },\n    { name: 'number', label: 'Number' },\n  ];\n\n  return (\n    <Flex align=\"center\" justify=\"center\">\n      <Box p={6} rounded=\"md\">\n        <Text\n          fontSize=\"25px\"\n          fontWeight=\"extrabold\"\n          textAlign={['center']}\n          mb=\"20px\"\n        >\n          Phonebook\n        </Text>\n        <Formik initialValues={initialValues} onSubmit={handleSubmitForm}>\n          {({ values, handleChange, handleBlur }) => (\n            <Form>\n              {fieldsData.map(({ name, label }) => (\n                <div key={name}>\n                  <FormLabel\n                    fontWeight=\"300\"\n                    fontSize=\"15px\"\n                    mb=\"0px\"\n                    mt=\"15px\"\n                  >\n                    {label}\n                  </FormLabel>\n                  <Field\n                    as={Input}\n                    variant=\"filled\"\n                    name={name}\n                    type=\"text\"\n                    id={name}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder={label}\n                    value={values[name] || ''}\n                  />\n                </div>\n              ))}\n              <Button type=\"submit\" colorScheme=\"purple\" width=\"full\" mt=\"30px\">\n                Add contact\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Box, Button, Flex } from '@chakra-ui/react';\nimport { getUserName } from '../../../redux/auth/auth-selectors';\nimport { deleteContact } from '../../../redux/contacts/contactsApi';\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  TableContainer,\n} from '@chakra-ui/react';\n\nconst ContactList = ({ getFilteredContacts }) => {\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContact(id));\n  const name = useSelector(getUserName);\n\n  return (\n    <Flex align=\"center\" justify=\"center\">\n      <Box p={6}>\n        <TableContainer>\n          <Table variant=\"simple\">\n            <TableCaption>\n              Personal phonebook&nbsp;\n              {name}\n            </TableCaption>\n            <Thead>\n              <Tr>\n                <Th>Name</Th>\n                <Th>Number</Th>\n                <Th></Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {getFilteredContacts?.map(({ id, name, number }) => (\n                <Tr key={id}>\n                  <Td>{name}</Td>\n                  <Td>{number}</Td>\n                  <Td isNumeric>\n                    <Button\n                      h=\"20px\"\n                      type=\"button\"\n                      onClick={() => handleDelete(id)}\n                    >\n                      Delete\n                    </Button>\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        </TableContainer>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default ContactList;\n","import { Box, Flex, Text } from '@chakra-ui/react';\nimport { Input } from '@chakra-ui/react';\n\nconst Filter = ({ onChangeFilter, value }) => {\n  return (\n    <Flex align=\"center\" justify=\"center\">\n      <Box p={6} rounded=\"md\">\n        <Text fontSize=\"20px\" fontWeight=\"extrabold\" textAlign={['center']}>\n          Contacts\n        </Text>\n        <form>\n          <Text htmlFor=\"text\" textAlign={['center']}>\n            Find contacts by name\n          </Text>\n          <Input\n            id=\"text\"\n            name=\"text\"\n            type=\"text\"\n            onChange={onChangeFilter}\n            value={value}\n          />\n        </form>\n      </Box>\n    </Flex>\n  );\n};\nexport default Filter;\n","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/contactsApi';\nimport Filter from './components/Filter';\nimport { selectAllContacts } from '../../redux/contacts/contactsSelectors';\nimport { ChakraProvider, Box, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\n\nconst ContactPage = () => {\n  const [filtered, setFiltered] = useState('');\n  const contacts = useSelector(selectAllContacts);\n  const onChangeFilter = e => {\n    setFiltered(e.target.value);\n  };\n\n  const getFilteredContacts = () => {\n    const filterNormalized = filtered.toLowerCase();\n    return contacts?.filter(contact =>\n      contact.name.toLowerCase().includes(filterNormalized)\n    );\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box maxW=\"960px\" mx=\"auto\">\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <ContactForm />\n        <Filter onChangeFilter={onChangeFilter} value={filtered} />\n        <ContactList getFilteredContacts={getFilteredContacts()} />\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default ContactPage;\n","import { getIsLoggedIn } from '../../redux/auth/auth-selectors';\nimport { useSelector } from 'react-redux';\nimport ContactPage from '../ContactPages/ContactPage';\nimport LoginPage from 'pages/LoginPage/LoginPage';\n\nconst HomePage = () => {\n  const isLoggedIn = useSelector(getIsLoggedIn);\n\n  return <>{isLoggedIn ? <ContactPage /> : <LoginPage />}</>;\n};\n\nexport default HomePage;\n","import { Formik, Form, Field } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { Box, Button, Flex, FormLabel, Input } from '@chakra-ui/react';\n\nimport { logIn } from '../../redux/auth/auth-operations';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmitForm = (values, { setSubmitting, resetForm }) => {\n    setSubmitting(true);\n    dispatch(logIn(values));\n    resetForm();\n    setSubmitting(false);\n  };\n\n  const fieldsData = [\n    { name: 'email', label: 'Email', type: 'text' },\n    { name: 'password', label: 'Password', type: 'password' },\n  ];\n\n  return (\n    <Flex align=\"center\" justify=\"center\">\n      <Box p={6} rounded=\"md\">\n        <Formik initialValues={initialValues} onSubmit={handleSubmitForm}>\n          {({ values, handleChange, handleBlur }) => (\n            <Form>\n              {fieldsData.map(({ name, label, type }) => (\n                <div key={name}>\n                  <FormLabel htmlFor=\"\">{label}</FormLabel>\n                  <Field\n                    as={Input}\n                    variant=\"filled\"\n                    name={name}\n                    type={type}\n                    id={name}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder={label}\n                    value={values[name] || ''}\n                  />\n                </div>\n              ))}\n              <Button type=\"submit\" colorScheme=\"purple\" width=\"full\" mt=\"30px\">\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default LoginPage;\n"],"names":["selectAllContacts","state","contacts","items","dispatch","useDispatch","allContacts","useSelector","fieldsData","name","label","align","justify","p","rounded","fontSize","fontWeight","textAlign","mb","initialValues","email","password","onSubmit","values","setSubmitting","resetForm","some","item","toLowerCase","alert","addContact","handleChange","handleBlur","map","mt","as","Input","variant","type","id","onBlur","onChange","placeholder","value","colorScheme","width","getFilteredContacts","getUserName","Tr","Th","number","Td","isNumeric","h","onClick","deleteContact","handleDelete","onChangeFilter","htmlFor","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","color","marginLeft","icon","useState","filtered","setFiltered","useEffect","getContacts","theme","maxW","mx","justifySelf","e","target","filterNormalized","filter","contact","includes","isLoggedIn","getIsLoggedIn","logIn"],"sourceRoot":""}